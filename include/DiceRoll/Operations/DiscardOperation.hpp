#ifndef DICEROLL_DISCARDOPERATION_H
#define DICEROLL_DISCARDOPERATION_H

#include "DiceRoll/Operations/ComplexOperation.hpp"
#include "DiceRoll/RollCompare/IRollCompare.hpp"

namespace DiceRoll {
/**
 * \brief Operation that discards certain number of results.
 *
 * This operation will discard any amount of numbers generated by componentOp
 * to leave only the amount given to it by leave_amount. It will discard
 * numbers based on chosen comparator.
 *
 * If componentOp generated just one result or leave_amount is greater or
 * equal to amount of numbers generated by it, this operation will return just
 * the result of componentOp.
 *
 * Syntax for RollResult:
 * (dis[<leave_amount>, <comparator_symbol>]: <resulting numbers> :<rest>)
 * e.g. (dis[2, >]: 5 4 :(1 2 3 4 5))
 */
class DiscardOperation : public ComplexOperation {
  const int leave_amount_;
  DiceRoll::IRollCompare* comparator_;

  std::unique_ptr<RollResult> execute(
      std::unique_ptr<RollResult> component_result);

 public:
  /**
   * \brief DiscardOperation
   * Multiple or singular value operation
   *
   * \param componentOp An operation the result of which should be truncated.
   * \param leave_amount How many numbers should be left in the result.
   * \param comparator Determines the method of discarding.
   */
  DiscardOperation(IOperation* componentOp,
                   int leave_amount,
                   DiceRoll::IRollCompare* comparator);
  ~DiscardOperation() { }

  // Syntax for RollResult:
  // (dis[<leave_amount>, <comparator_symbol>]: <resulting numbers> :<rest>)
  // e.g. (dis[2, >]: 5 4 :(1 2 3 4 5))
  inline std::unique_ptr<RollResult> evaluate() {
    return execute(componentOp_->evaluate());
  }
};
}

#endif // DICEROLL_DISCARDOPERATION_H
